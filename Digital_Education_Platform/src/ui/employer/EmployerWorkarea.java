/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.employer;

import directory.StudentDirectory;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.employer.EmployerRating;
import model.professor.Professor;
import model.student.Student;
import ui.MainJFrame;

/**
 *
 * @author drag
 */
public class EmployerWorkarea extends javax.swing.JPanel {

	private MainJFrame workSpace;
	private StudentDirectory studentDir;

	/**
	 * Creates new form EmployerWorkarea
	 */
	public EmployerWorkarea(MainJFrame workSpace) {
		this.workSpace = workSpace;
		this.studentDir = this.workSpace.getStudentDir();

		initComponents();

		this.workSpace.add(this);
		this.workSpace.pack();

		tableProf.setRowHeight(30);
		tableProf.getColumnModel().getColumn(3).setMaxWidth(0);

		tableStudent.setRowHeight(30);
		tableStudent.getColumnModel().getColumn(3).setMaxWidth(0);

		this.populateProfessors();
		this.populateStudents();
	}

	/**
	 * This method is called from within the constructor to initialize the
	 * form. WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                pageTitle = new javax.swing.JLabel();
                jScrollPane1 = new javax.swing.JScrollPane();
                tableStudent = new javax.swing.JTable();
                jScrollPane2 = new javax.swing.JScrollPane();
                tableProf = new javax.swing.JTable();
                txtSearchProf = new javax.swing.JTextField();
                txtSearchStudent = new javax.swing.JTextField();
                searchStudent = new javax.swing.JButton();
                searchProf = new javax.swing.JButton();
                updateStudents = new javax.swing.JButton();
                updateProf = new javax.swing.JButton();
                btnLogout = new javax.swing.JButton();

                pageTitle.setFont(new java.awt.Font("Inter", 1, 24)); // NOI18N
                pageTitle.setText("Welcome, here you can rate professors and students");

                tableStudent.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {

                        },
                        new String [] {
                                "Student", "Rating", "Comments", ""
                        }
                ) {
                        boolean[] canEdit = new boolean [] {
                                false, true, true, false
                        };

                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                                return canEdit [columnIndex];
                        }
                });
                jScrollPane1.setViewportView(tableStudent);
                if (tableStudent.getColumnModel().getColumnCount() > 0) {
                        tableStudent.getColumnModel().getColumn(3).setResizable(false);
                }

                tableProf.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {

                        },
                        new String [] {
                                "Professor", "Rating", "Comments", ""
                        }
                ) {
                        boolean[] canEdit = new boolean [] {
                                false, true, true, false
                        };

                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                                return canEdit [columnIndex];
                        }
                });
                tableProf.setColumnSelectionAllowed(true);
                jScrollPane2.setViewportView(tableProf);
                tableProf.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
                if (tableProf.getColumnModel().getColumnCount() > 0) {
                        tableProf.getColumnModel().getColumn(3).setResizable(false);
                }

                txtSearchProf.setText("Search with professor name");

                txtSearchStudent.setText("Search with student name");

                searchStudent.setBackground(new java.awt.Color(0, 153, 0));
                searchStudent.setFont(new java.awt.Font("Inter", 1, 15)); // NOI18N
                searchStudent.setForeground(new java.awt.Color(255, 255, 255));
                searchStudent.setText("Search");
                searchStudent.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                searchStudentActionPerformed(evt);
                        }
                });

                searchProf.setBackground(new java.awt.Color(0, 153, 0));
                searchProf.setFont(new java.awt.Font("Inter", 1, 15)); // NOI18N
                searchProf.setForeground(new java.awt.Color(255, 255, 255));
                searchProf.setText("Search");
                searchProf.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                searchProfActionPerformed(evt);
                        }
                });

                updateStudents.setFont(new java.awt.Font("Inter", 1, 15)); // NOI18N
                updateStudents.setText("Update student ratings");
                updateStudents.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                updateStudentsActionPerformed(evt);
                        }
                });

                updateProf.setFont(new java.awt.Font("Inter", 1, 15)); // NOI18N
                updateProf.setText("Update professor ratings");
                updateProf.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                updateProfActionPerformed(evt);
                        }
                });

                btnLogout.setText("<< Logout");
                btnLogout.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnLogoutActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
                this.setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(pageTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 1093, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                                .addComponent(txtSearchProf)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(searchProf, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 617, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(147, 147, 147)
                                                                .addComponent(updateProf, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jScrollPane1)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(0, 0, Short.MAX_VALUE)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addComponent(updateStudents, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addGap(146, 146, 146))
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addComponent(txtSearchStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(searchStudent)))))))
                                .addContainerGap())
                );

                layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {searchProf, searchStudent});

                layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {updateProf, updateStudents});

                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(pageTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(searchStudent)
                                                .addComponent(searchProf)
                                                .addComponent(txtSearchStudent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(txtSearchProf, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 592, Short.MAX_VALUE)
                                        .addComponent(jScrollPane1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(updateStudents, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(updateProf, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())
                );

                layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {searchProf, searchStudent, txtSearchProf, txtSearchStudent});

        }// </editor-fold>//GEN-END:initComponents

        private void updateProfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateProfActionPerformed
		int R = tableProf.getRowCount();
		int C = tableProf.getColumnCount();

		for (int i = 0; i < R; ++i) {
			for (int j = 0; j < C; ++j) {
				String profId = (String) tableProf.getValueAt(i, 3);
				Professor p = this.workSpace.getProfDir().getProfessor(profId);

				float rating = Float.parseFloat((String) tableProf.getValueAt(i, 1));
				String comments = (String) tableProf.getValueAt(i, 2);

				p.addEmployerRating(this.workSpace.getUser(), rating, comments);
						
			}
		}
		this.populateProfessors();
		JOptionPane.showMessageDialog(this, "All professor ratings saved!");
        }//GEN-LAST:event_updateProfActionPerformed

        private void updateStudentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateStudentsActionPerformed
		int R = tableStudent.getRowCount();
		int C = tableStudent.getColumnCount();

		for (int i = 0; i < R; ++i) {
			for (int j = 0; j < C; ++j) {
				String studentId = (String) tableStudent.getValueAt(i, 3);
				Student s = this.workSpace.getStudentDir().getStudentById(studentId);

				float rating = Float.parseFloat((String) tableStudent.getValueAt(i, 1));
				String comments = (String) tableStudent.getValueAt(i, 2);

				s.addEmployerRating(this.workSpace.getUser(), rating, comments);
						
			}
		}
		this.populateProfessors();
		JOptionPane.showMessageDialog(this, "All student ratings saved!");
        }//GEN-LAST:event_updateStudentsActionPerformed

        private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
		this.workSpace.getInitJPanel().setVisible(true);
		this.setVisible(false);
        }//GEN-LAST:event_btnLogoutActionPerformed

        private void searchProfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchProfActionPerformed
		int R = tableProf.getRowCount();
		int C = tableProf.getColumnCount();

		String query = txtSearchProf.getText();

		for (int i=0;i<R;++i) {
			for (int j=0;j<C;++j) {
				// Row = i and Col = j
				String profName = (String) tableProf.getValueAt(i, 0);

				if (profName.trim().equalsIgnoreCase(query)) {
					tableProf.changeSelection(i, 0, false, false);
					return;
				}

			}
		}
		JOptionPane.showMessageDialog(this, "No such professor found!");
        }//GEN-LAST:event_searchProfActionPerformed

        private void searchStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchStudentActionPerformed
		int R = tableStudent.getRowCount();
		int C = tableStudent.getColumnCount();

		String query= txtSearchStudent.getText();

		for (int i=0;i<R;++i) {
			for (int j=0;j<C;++j) {
				// Row = i and Col = j
				String studentName = (String) tableStudent.getValueAt(i, 0);

				if (studentName.trim().equalsIgnoreCase(query)) {
					tableStudent.changeSelection(i, 0, false, false);
					return;
				}

			}
		}
		JOptionPane.showMessageDialog(this, "No such student found!");
        }//GEN-LAST:event_searchStudentActionPerformed


        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JButton btnLogout;
        private javax.swing.JScrollPane jScrollPane1;
        private javax.swing.JScrollPane jScrollPane2;
        private javax.swing.JLabel pageTitle;
        private javax.swing.JButton searchProf;
        private javax.swing.JButton searchStudent;
        private javax.swing.JTable tableProf;
        private javax.swing.JTable tableStudent;
        private javax.swing.JTextField txtSearchProf;
        private javax.swing.JTextField txtSearchStudent;
        private javax.swing.JButton updateProf;
        private javax.swing.JButton updateStudents;
        // End of variables declaration//GEN-END:variables

	private void populateStudents() {

		List<Student> students = this.studentDir.getDirectory();

		DefaultTableModel tbl = (DefaultTableModel) tableStudent.getModel();

		int n = tbl.getRowCount();
		while (n-- > 0) {
			tbl.removeRow(n);
		}

		for (Student s : students) {
			EmployerRating emRating = s.getEmployerRating(this.workSpace.getUser());

			Vector<String> row = new Vector<>();
			row.add(s.getUserProfile().getPerson().getFullName());
			row.add(String.valueOf(emRating != null ? emRating.getRating() : 0));
			row.add(String.valueOf(emRating != null ? emRating.getComments() : ""));
			row.add(s.getUuid());

			tbl.addRow(row);
		}
	}

	private void populateProfessors() {
		List<Professor> professors = this.workSpace.getProfDir().getDirectory();

		DefaultTableModel tbl = (DefaultTableModel) tableProf.getModel();

		int n = tbl.getRowCount();
		while (n-- > 0) {
			tbl.removeRow(n);
		}

		for (Professor p : professors) {
			EmployerRating emRating = p.getEmployerRating(this.workSpace.getUser());

			Vector<String> row = new Vector<>();
			row.add(p.getUserProfile().getPerson().getFullName());
			row.add(String.valueOf(emRating != null ? emRating.getRating() : 0));
			row.add(String.valueOf(emRating != null ? emRating.getComments() : ""));
			row.add(p.getUuid());

			tbl.addRow(row);
		}
	}
}
