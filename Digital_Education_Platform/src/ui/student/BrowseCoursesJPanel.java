/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.student;

import constants.Course;
import constants.Grade;
import directory.UniClassDirectory;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.UniClass;
import model.professor.Professor;
import model.student.Student;
import ui.ButtonCellRenderer;
import ui.MainJFrame;

/**
 *
 * @author drag
 */
public class BrowseCoursesJPanel extends javax.swing.JPanel {

	private MainJFrame workSpace;
	private UniClassDirectory uniClassDir = null;
	private List<String> courseList = null;
	private Student student = null;
	private int actionsColumnIndex = -1;

	/**
	 * Creates new form BrowseCoursesJPanel
	 */
	public BrowseCoursesJPanel(MainJFrame workSpace) {
		this.workSpace = workSpace;
		this.uniClassDir = this.workSpace.getUniClassDir();
		this.student = this.workSpace.getStudentDir().getStudent(this.workSpace.getUser());

		this.courseList = new ArrayList<>();
		this.courseList.add("Select a course");

		initComponents();

		Action actionEnroll = new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				try {
					Student student = workSpace.getStudentDir().getStudent(workSpace.getUser());
//					System.out.println(student.getTranscript().getCurrentSemester().getClasses().size());       /// important
					if (student.getTranscript().getCurrentSemester().getClasses().size() == 2) {
						JOptionPane.showMessageDialog(null, "Sorry, you are allowed to enroll into only two courses per semester.");
						return;
						// wishlist a course feature??
					}


					int selectedRowIndex = tblCourses.getSelectedRow();
					String courseId = (String) tblCourses.getValueAt(selectedRowIndex, 4);
					UniClass uniClass = workSpace.getUniClassDir().getUniClassById(courseId);

					if (student.hasTakenAlready(uniClass)) {
						JOptionPane.showMessageDialog(null, "You have already taken this course, kindly select another one.");
						return;
					}

					uniClass.setSemesterSerialNum(student.getTranscript().getCurrentSemester().getSerialNum());
					uniClass.setNumberOfStudents(uniClass.getNumberOfStudents()+1);
					student.getTranscript().getCurrentSemester().addClass(uniClass, Grade.YET_TO_COMPLETE);

					populateTable();

					JOptionPane.showMessageDialog(null, "Congratulations! You have registered for " + uniClass.getCourse().getName() + " by Prof. " + uniClass.getProfessor().getUserProfile().getPerson().getFirstName());
				} catch (Exception exception) {
					exception.printStackTrace();
					JOptionPane.showMessageDialog(null, "There was an issue enrolling you into this course. Please try again.");
				}

			}
		};
		ButtonCellRenderer button = new ButtonCellRenderer(tblCourses, actionEnroll, 3);

		this.workSpace.add(this);
		this.workSpace.pack();

		this.populateTable();
	}

	/**
	 * This method is called from within the constructor to initialize the
	 * form. WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                pageTitle = new javax.swing.JLabel();
                comboSelectProgram = new javax.swing.JComboBox<>();
                lblSelectCourse = new javax.swing.JLabel();
                tableHolder = new javax.swing.JScrollPane();
                tblCourses = new javax.swing.JTable();
                btnSearch = new javax.swing.JButton();
                btnFilterName = new javax.swing.JButton();
                searchByName = new javax.swing.JTextField();
                searchByLanguage = new javax.swing.JTextField();
                btnFilterLanguage = new javax.swing.JButton();
                btnFilterRegion = new javax.swing.JButton();
                searchByRegion = new javax.swing.JTextField();

                pageTitle.setFont(new java.awt.Font("Inter", 1, 24)); // NOI18N
                pageTitle.setText("Browse courses from around the world");

                for (Course c : Course.values()) {
                        String course = c.getSpeciality() + " : " + c.getName();
                        courseList.add(course);
                }
                comboSelectProgram.setModel(new javax.swing.DefaultComboBoxModel<>(courseList.toArray(new String[0])));

                lblSelectCourse.setText("Select your desired program");

                //tblCourses.setDefaultRenderer(Object.class, new ButtonCellRenderer());
                tblCourses.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {

                        },
                        new String [] {
                                "Professor", "Rating", "Timings", "Actions", "Course ID"
                        }
                ) {
                        boolean[] canEdit = new boolean [] {
                                false, false, false, true, true
                        };

                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                                return canEdit [columnIndex];
                        }
                });
                //tblCourses.getColumnModel().getColumn(2).setCellRenderer(new ButtonCellRenderer());
                //tblCourses.getColumnModel().getColumn(2).setCellEditor(new ButtonCellRenderer("Enroll"));
                tblCourses.setColumnSelectionAllowed(true);
                tblCourses.setRowHeight(30);
                tableHolder.setViewportView(tblCourses);
                tblCourses.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

                btnSearch.setBackground(new java.awt.Color(0, 153, 51));
                btnSearch.setFont(new java.awt.Font("Inter", 1, 15)); // NOI18N
                btnSearch.setForeground(new java.awt.Color(255, 255, 255));
                btnSearch.setText("Search");
                btnSearch.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnSearchActionPerformed(evt);
                        }
                });

                btnFilterName.setBackground(new java.awt.Color(153, 153, 255));
                btnFilterName.setFont(new java.awt.Font("Inter", 1, 15)); // NOI18N
                btnFilterName.setForeground(new java.awt.Color(255, 255, 255));
                btnFilterName.setText("Filter");
                btnFilterName.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnFilterNameActionPerformed(evt);
                        }
                });

                searchByName.setText("Professor name");
                searchByName.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                searchByNameActionPerformed(evt);
                        }
                });

                searchByLanguage.setText("Language");
                searchByLanguage.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                searchByLanguageActionPerformed(evt);
                        }
                });

                btnFilterLanguage.setBackground(new java.awt.Color(153, 153, 255));
                btnFilterLanguage.setFont(new java.awt.Font("Inter", 1, 15)); // NOI18N
                btnFilterLanguage.setForeground(new java.awt.Color(255, 255, 255));
                btnFilterLanguage.setText("Filter");
                btnFilterLanguage.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnFilterLanguageActionPerformed(evt);
                        }
                });

                btnFilterRegion.setBackground(new java.awt.Color(153, 153, 255));
                btnFilterRegion.setFont(new java.awt.Font("Inter", 1, 15)); // NOI18N
                btnFilterRegion.setForeground(new java.awt.Color(255, 255, 255));
                btnFilterRegion.setText("Filter");
                btnFilterRegion.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnFilterRegionActionPerformed(evt);
                        }
                });

                searchByRegion.setText("Region");
                searchByRegion.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                searchByRegionActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
                this.setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(tableHolder)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(pageTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 1106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                        .addComponent(comboSelectProgram, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(lblSelectCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(btnSearch)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(searchByName, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(btnFilterName)
                                                                .addGap(8, 8, 8)
                                                                .addComponent(searchByRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(btnFilterRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(12, 12, 12)
                                                                .addComponent(searchByLanguage, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(btnFilterLanguage)))
                                                .addGap(0, 22, Short.MAX_VALUE)))
                                .addContainerGap())
                );

                layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {searchByLanguage, searchByName, searchByRegion});

                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(pageTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(lblSelectCourse)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(comboSelectProgram, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                .addComponent(btnSearch)
                                                                .addComponent(searchByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(btnFilterName))))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(searchByLanguage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(btnFilterLanguage)
                                                .addComponent(searchByRegion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(btnFilterRegion)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tableHolder, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE))
                );

                layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnFilterLanguage, btnFilterName, btnFilterRegion, btnSearch, comboSelectProgram, searchByLanguage, searchByName, searchByRegion});

        }// </editor-fold>//GEN-END:initComponents

        private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
		this.populateTable();
        }//GEN-LAST:event_btnSearchActionPerformed

        private void btnFilterNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterNameActionPerformed
		String query = searchByName.getText().trim();
		this.populateTableByName(query);
        }//GEN-LAST:event_btnFilterNameActionPerformed

        private void searchByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchByNameActionPerformed
        }//GEN-LAST:event_searchByNameActionPerformed

        private void searchByLanguageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchByLanguageActionPerformed
                // TODO add your handling code here:
        }//GEN-LAST:event_searchByLanguageActionPerformed

        private void btnFilterLanguageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterLanguageActionPerformed
		String query = searchByLanguage.getText().trim();
		this.populateTableByLanguage(query);
        }//GEN-LAST:event_btnFilterLanguageActionPerformed

        private void btnFilterRegionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterRegionActionPerformed
		String query = searchByRegion.getText().trim();
		this.populateTableByRegion(query);
        }//GEN-LAST:event_btnFilterRegionActionPerformed

        private void searchByRegionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchByRegionActionPerformed
                // TODO add your handling code here:
        }//GEN-LAST:event_searchByRegionActionPerformed


        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JButton btnFilterLanguage;
        private javax.swing.JButton btnFilterName;
        private javax.swing.JButton btnFilterRegion;
        private javax.swing.JButton btnSearch;
        private javax.swing.JComboBox<String> comboSelectProgram;
        private javax.swing.JLabel lblSelectCourse;
        private javax.swing.JLabel pageTitle;
        private javax.swing.JTextField searchByLanguage;
        private javax.swing.JTextField searchByName;
        private javax.swing.JTextField searchByRegion;
        private javax.swing.JScrollPane tableHolder;
        private javax.swing.JTable tblCourses;
        // End of variables declaration//GEN-END:variables


	private void populateTableByRegion(String query) {

		DefaultTableModel table = (DefaultTableModel) tblCourses.getModel();

		int n = table.getRowCount();
		while (n-- > 0) {
			table.removeRow(n);
		}

		List<UniClass> uniClasses = this.workSpace.getUniClassDir().getUniClassByRegion(query);

		for (var a : uniClasses) {

			Vector<String> row = new Vector<>();
			row.add(a.getProfessor().getUserProfile().getPerson().getFirstName());
			row.add(String.valueOf(a.getProfessor().getStudentRating()));
			row.add(a.getTiming().getStart() + "-" + a.getTiming().getEnd());

			if (this.student.getTranscript().getCurrentSemester().getClasses().containsKey(a)) {
				row.add("Enrolled");
			} else {
				row.add("Enroll");
			}

			row.add(a.getUuid());

			table.addRow(row);
		}
	}

	private void populateTable() { 								// original method

		DefaultTableModel table = (DefaultTableModel) tblCourses.getModel();

		int n = table.getRowCount();
		while (n-- > 0) {
			table.removeRow(n);
		}

		String query = comboSelectProgram.getSelectedItem().toString();
		if (query.equals("Select a course")) {
			return;
		}
		List<UniClass> uniClasses = this.workSpace.getUniClassDir().getProfThatTeach(query);

		for (var a : uniClasses) {
			System.out.println(a.getProfessor().getRegion());

			Vector<String> row = new Vector<>();
			row.add(a.getProfessor().getUserProfile().getPerson().getFirstName());
			row.add(String.valueOf(a.getProfessor().getStudentRating()));
			row.add(a.getTiming().getStart() + "-" + a.getTiming().getEnd());

			if (this.student.getTranscript().getCurrentSemester().getClasses().containsKey(a)) {
				row.add("Enrolled");
			} else {
				row.add("Enroll");
			}

			row.add(a.getUuid());

			table.addRow(row);
		}
	}

	private void populateTableByLanguage(String query) {

		DefaultTableModel table = (DefaultTableModel) tblCourses.getModel();

		int n = table.getRowCount();
		while (n-- > 0) {
			table.removeRow(n);
		}

		List<UniClass> uniClasses = this.workSpace.getUniClassDir().getUniClassByLanguage(query);

		for (var a : uniClasses) {

			Vector<String> row = new Vector<>();
			row.add(a.getProfessor().getUserProfile().getPerson().getFirstName());
			row.add(String.valueOf(a.getProfessor().getStudentRating()));
			row.add(a.getTiming().getStart() + "-" + a.getTiming().getEnd());

			if (this.student.getTranscript().getCurrentSemester().getClasses().containsKey(a)) {
				row.add("Enrolled");
			} else {
				row.add("Enroll");
			}

			row.add(a.getUuid());

			table.addRow(row);
		}
	}

	private void populateTableByName(String query) {
		DefaultTableModel table = (DefaultTableModel) tblCourses.getModel();

		int n = table.getRowCount();
		while (n-- > 0) {
			table.removeRow(n);
		}

		List<UniClass> uniClasses = this.workSpace.getUniClassDir().getUniClassByName(query);

		for (var a : uniClasses) {

			Vector<String> row = new Vector<>();
			row.add(a.getProfessor().getUserProfile().getPerson().getFirstName());
			row.add(String.valueOf(a.getProfessor().getStudentRating()));
			row.add(a.getTiming().getStart() + "-" + a.getTiming().getEnd());

			if (this.student.getTranscript().getCurrentSemester().getClasses().containsKey(a)) {
				row.add("Enrolled");
			} else {
				row.add("Enroll");
			}

			row.add(a.getUuid());

			table.addRow(row);
		}
	}
}
