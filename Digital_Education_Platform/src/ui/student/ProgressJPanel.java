/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.student;

import constants.Grade;
import java.awt.event.ActionEvent;
import java.util.Map;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.UniClass;
import model.User;
import model.student.Student;
import ui.ButtonCellRenderer;
import ui.MainJFrame;

/**
 *
 * @author drag
 */
public class ProgressJPanel extends javax.swing.JPanel {

	private MainJFrame workSpace = null;
	private User user = null;
	private Student student = null;

	/**
	 * Creates new form ProgressJPanel
	 */
	public ProgressJPanel(MainJFrame workSpace, User user) {

		this.user = user;
		this.student = workSpace.getStudentDir().getStudent(workSpace.getUser());
		this.workSpace = workSpace;

		this.workSpace.add(this);
		this.workSpace.pack();

		initComponents();

		this.pageTitle.setText("Great going, " + this.user.getPerson().getFirstName() + ". Track your progress here!");

		coursesTable.setRowHeight(30);
		Action actionDrop = new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				try {
					int selectedRowIndex = coursesTable.getSelectedRow();
					String courseId = (String) coursesTable.getValueAt(selectedRowIndex, 4);
					UniClass uniClass = workSpace.getUniClassDir().getUniClassById(courseId);

					student.getTranscript().getCurrentSemester().dropClass(uniClass);

					populateCourses();

					JOptionPane.showMessageDialog(null, "Successfully dropped " + uniClass.getCourse().getName() + " by Prof. " + uniClass.getProfessor().getUserProfile().getPerson().getFirstName());
				} catch (Exception exception) {
					exception.printStackTrace();
					JOptionPane.showMessageDialog(null, "There was an issue dropping you into this course. Please try again.");
				}

			}
		};
		Action actionComplete = new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				try {
					int selectedRowIndex = coursesTable.getSelectedRow();
					String courseId = (String) coursesTable.getValueAt(selectedRowIndex, 4);
					UniClass uniClass = workSpace.getUniClassDir().getUniClassById(courseId);

					student = workSpace.getStudentDir().getStudent(workSpace.getUser());
					student.getTranscript().getCurrentSemester().getClasses().put(uniClass, Grade.YET_TO_GRADE);

					populateCourses();

					JOptionPane.showMessageDialog(null, "Completed course " + uniClass.getCourse().getName() + " by Prof. " + uniClass.getProfessor().getUserProfile().getPerson().getFirstName());
				} catch (Exception exception) {
					exception.printStackTrace();
					JOptionPane.showMessageDialog(null, "There was an issue completing the course. Please try again.");
				}

			}
		};
		ButtonCellRenderer dropButton = new ButtonCellRenderer(coursesTable, actionDrop, 2);
		ButtonCellRenderer completeButton = new ButtonCellRenderer(coursesTable, actionComplete, 3);


		if (this.student.hasRequestedForGraduation()) {
			btnCanGraduate.setText("Requested for graduation");
		}

		this.lblCurrentSemesterValue.setText("Semester " + this.student.getTranscript().getCurrentSemester().getSerialNum());
		this.currentGpa.setText(String.valueOf(this.student.getTranscript().getGpa()));
		this.populateCourses();
	}

	/**
	 * This method is called from within the constructor to initialize the
	 * form. WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                pageTitle = new javax.swing.JLabel();
                btnCanGraduate = new javax.swing.JButton();
                tableJPanel = new javax.swing.JScrollPane();
                coursesTable = new javax.swing.JTable();
                lblCurrentSemester = new javax.swing.JLabel();
                lblCurrentSemesterValue = new javax.swing.JLabel();
                lblCurrentGpa = new javax.swing.JLabel();
                currentGpa = new javax.swing.JLabel();

                pageTitle.setFont(new java.awt.Font("Inter", 1, 24)); // NOI18N
                pageTitle.setText("Going great Student, track your progress here");

                btnCanGraduate.setBackground(java.awt.Color.lightGray);
                btnCanGraduate.setFont(new java.awt.Font("Inter", 1, 15)); // NOI18N
                btnCanGraduate.setText("Can I graduate?");
                btnCanGraduate.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnCanGraduateActionPerformed(evt);
                        }
                });

                coursesTable.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {
                                {null, null, null, null, null, null, null},
                                {null, null, null, null, null, null, null},
                                {null, null, null, null, null, null, null},
                                {null, null, null, null, null, null, null}
                        },
                        new String [] {
                                "Enrolled Courses", "Grade", "Drop", "Complete", "Course ID", "Semester", "Professor"
                        }
                ) {
                        boolean[] canEdit = new boolean [] {
                                false, false, true, true, false, false, false
                        };

                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                                return canEdit [columnIndex];
                        }
                });
                coursesTable.setColumnSelectionAllowed(true);
                tableJPanel.setViewportView(coursesTable);
                coursesTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

                lblCurrentSemester.setFont(new java.awt.Font("Inter", 0, 15)); // NOI18N
                lblCurrentSemester.setText("Current semester:");

                lblCurrentSemesterValue.setFont(new java.awt.Font("Inter", 1, 15)); // NOI18N
                lblCurrentSemesterValue.setText("jLabel2");

                lblCurrentGpa.setText("Current GPA:");

                currentGpa.setFont(new java.awt.Font("Inter", 1, 15)); // NOI18N
                currentGpa.setText("jLabel2");

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
                this.setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(12, 12, 12)
                                                                .addComponent(pageTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 853, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(84, 84, 84)
                                                                .addComponent(lblCurrentSemester)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(lblCurrentSemesterValue)
                                                                .addGap(183, 183, 183))
                                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                                .addContainerGap()
                                                                .addComponent(lblCurrentGpa)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(currentGpa)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(btnCanGraduate, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(tableJPanel)))
                                .addGap(66, 66, 66))
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(pageTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblCurrentSemester)
                                        .addComponent(lblCurrentSemesterValue))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tableJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(btnCanGraduate, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(lblCurrentGpa)
                                                .addComponent(currentGpa)))
                                .addContainerGap(133, Short.MAX_VALUE))
                );
        }// </editor-fold>//GEN-END:initComponents

        private void btnCanGraduateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCanGraduateActionPerformed
		this.student.setRequestedForGraduation(true);
		if (this.student.hasRequestedForGraduation()) {
			btnCanGraduate.setText("Requested for graduation");
		}
        }//GEN-LAST:event_btnCanGraduateActionPerformed


        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JButton btnCanGraduate;
        private javax.swing.JTable coursesTable;
        private javax.swing.JLabel currentGpa;
        private javax.swing.JLabel lblCurrentGpa;
        private javax.swing.JLabel lblCurrentSemester;
        private javax.swing.JLabel lblCurrentSemesterValue;
        private javax.swing.JLabel pageTitle;
        private javax.swing.JScrollPane tableJPanel;
        // End of variables declaration//GEN-END:variables

	private void populateCourses() {

		DefaultTableModel table = (DefaultTableModel) coursesTable.getModel();

		int n = table.getRowCount();
		while (n-- > 0) {
			table.removeRow(n);
		}

		Student student = this.workSpace.getStudentDir().getStudent(this.user);
		Map<UniClass, Grade> classes = student.getTranscript().getAllClasses();

		int rowCounter = 0;
		for (Map.Entry<UniClass, Grade> entry : classes.entrySet()) {
			UniClass key = entry.getKey();
			Grade value = entry.getValue();

			Vector<String> row = new Vector<>();
			row.add(key.getFullCourseName());
			row.add(value.equals(Grade.YET_TO_COMPLETE) ? "N/A" : value.toString());
			row.add("Drop");
			if (value.equals(Grade.I) || value.equals(Grade.YET_TO_COMPLETE)) {
				row.add("Complete");
			} else {
				row.add("Completed");
			}
			row.add(key.getUuid());
			row.add(String.valueOf(key.getSemesterSerialNum()));
			row.add(String.valueOf(key.getProfessor().getUserProfile().getPerson().getFullName()));

			table.addRow(row);
		}
	}
}
