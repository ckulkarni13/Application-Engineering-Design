package ui.student;

import java.util.List;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import model.Notification;
import model.student.Student;
import ui.MainJFrame;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

/**
 *
 * @author drag
 */
public class NotificationsJPanel extends javax.swing.JPanel {

	private MainJFrame workSpace = null;
	private Student student = null;
	/**
	 * Creates new form NotificationsJPanel
	 */
	public NotificationsJPanel(MainJFrame workSpace) {
		this.workSpace = workSpace;
		this.student = this.workSpace.getStudentDir().getStudent(this.workSpace.getUser());

		initComponents();

		this.workSpace.add(this);
		this.workSpace.pack();

		table.setRowHeight(50);

		this.populateTable();
	}

	/**
	 * This method is called from within the constructor to initialize the
	 * form. WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                pageTitle = new javax.swing.JLabel();
                jScrollPane1 = new javax.swing.JScrollPane();
                table = new javax.swing.JTable();

                pageTitle.setFont(new java.awt.Font("Inter", 1, 24)); // NOI18N
                pageTitle.setText("Your notifications");

                table.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {

                        },
                        new String [] {
                                "Subject", "Message"
                        }
                ) {
                        boolean[] canEdit = new boolean [] {
                                false, false
                        };

                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                                return canEdit [columnIndex];
                        }
                });
                jScrollPane1.setViewportView(table);

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
                this.setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(pageTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 1106, Short.MAX_VALUE)
                                        .addComponent(jScrollPane1))
                                .addContainerGap(15, Short.MAX_VALUE))
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(pageTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
                                .addContainerGap())
                );
        }// </editor-fold>//GEN-END:initComponents


        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JScrollPane jScrollPane1;
        private javax.swing.JLabel pageTitle;
        private javax.swing.JTable table;
        // End of variables declaration//GEN-END:variables

	private void populateTable() {

		List<Notification> notifications = this.student.getNotifications();

		DefaultTableModel tbl = (DefaultTableModel) table.getModel();

		int n = tbl.getRowCount();
		while (n-- > 0) {
			tbl.removeRow(n);			// remove excess rows
		}

		for (Notification notif: notifications) {
			Vector<String> row = new Vector<>();
			row.add(notif.getSubject());
			row.add(notif.getMessage());

			tbl.addRow(row);
		}
	}
}
