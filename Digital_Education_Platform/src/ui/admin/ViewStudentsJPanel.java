/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.admin;

import constants.Grade;
import directory.StudentDirectory;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import model.UniClass;
import model.student.Student;
import ui.MainJFrame;

/**
 *
 * @author drag
 */
public class ViewStudentsJPanel extends javax.swing.JPanel {

	private MainJFrame workSpace;
	private StudentDirectory studentDir;

	/**
	 * Creates new form ViewStudentsJPanel
	 */
	public ViewStudentsJPanel(MainJFrame workSpace) {
		this.workSpace = workSpace;
		this.studentDir = this.workSpace.getStudentDir();

		initComponents();
		table.setRowHeight(30);

		this.workSpace.add(this);
		this.workSpace.pack();

		this.populateTable();
	}

	/**
	 * This method is called from within the constructor to initialize the
	 * form. WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                pageTitle = new javax.swing.JLabel();
                jScrollPane1 = new javax.swing.JScrollPane();
                table = new javax.swing.JTable();

                pageTitle.setFont(new java.awt.Font("Inter", 1, 24)); // NOI18N
                pageTitle.setText("View student statistics");

                table.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {

                        },
                        new String [] {
                                "Name", "Enrolled course", "Grade", "GPA", "Professor", "Employer rating"
                        }
                ) {
                        boolean[] canEdit = new boolean [] {
                                false, false, false, false, false, false
                        };

                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                                return canEdit [columnIndex];
                        }
                });
                jScrollPane1.setViewportView(table);

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
                this.setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane1)
                                        .addComponent(pageTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 1054, Short.MAX_VALUE))
                                .addContainerGap())
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(pageTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
                                .addContainerGap())
                );
        }// </editor-fold>//GEN-END:initComponents


        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JScrollPane jScrollPane1;
        private javax.swing.JLabel pageTitle;
        private javax.swing.JTable table;
        // End of variables declaration//GEN-END:variables

	private void populateTable() {
		List<Student> students = this.studentDir.getDirectory();

		DefaultTableModel tbl = (DefaultTableModel) table.getModel();

		int n = tbl.getRowCount();
		while (n-- > 0) {
			tbl.removeRow(n);
		}

		for (Student s : students) {
			var classes = s.getTranscript().getAllClasses();
			if (classes.isEmpty()) continue;	
			Vector<String> mainrow = new Vector<>();
				mainrow.add(s.getUserProfile().getPerson().getFullName());
				mainrow.add(new ArrayList<>(classes.entrySet()).get(0).getKey().getFullCourseName());
				mainrow.add(new ArrayList<>(classes.entrySet()).get(0).getValue().toString());
				mainrow.add(String.valueOf(s.getTranscript().getGpa()));
				mainrow.add(new ArrayList<>(classes.entrySet()).get(0).getKey().getProfessor().getUserProfile().getPerson().getFullName());
				mainrow.add(String.valueOf(s.getAvgEmployerRating()));
				int i = 0;
			for (Map.Entry<UniClass, Grade> uc : classes.entrySet()) {

				Vector<String> row = new Vector<>();
				row.add("");
				row.add(uc.getKey().getFullCourseName());
				row.add(uc.getValue().toString());
				row.add("");
				row.add(uc.getKey().getProfessor().getUserProfile().getPerson().getFullName());
				row.add("");
				if (i == 0) {
					tbl.addRow(mainrow);
					++i;
					continue;	
				}
				tbl.addRow(row);
			}
		}

	}
}
