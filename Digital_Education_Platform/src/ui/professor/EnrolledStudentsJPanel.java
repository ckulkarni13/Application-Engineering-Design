/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.professor;

import constants.Course;
import constants.Grade;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.UniClass;
import model.professor.Professor;
import model.student.Student;
import ui.MainJFrame;

/**
 *
 * @author drag
 */
public class EnrolledStudentsJPanel extends javax.swing.JPanel {

	private MainJFrame workSpace = null;
	private Professor professor = null;
	private List<UniClass> classesList = null;

	/**
	 * Creates new form EnrolledStudentsJPanel
	 */
	public EnrolledStudentsJPanel(MainJFrame workSpace) {
		this.workSpace = workSpace;
		this.professor = this.workSpace.getProfDir().getProfessor(this.workSpace.getUser());

		initComponents();

		this.workSpace.add(this);
		this.workSpace.pack();

		this.classesList = this.workSpace.getUniClassDir().getProfClasses(professor);
		for (UniClass _uc : classesList) {
			if (_uc.getSerial().equalsIgnoreCase("first")) {
				lblCourseTitleOne.setText(_uc.getCourse().getName());
				this.populateStudents("first", false);
			} else {
				lblCourseTitleTwo.setText(_uc.getCourse().getName());
				this.populateStudents("second", false);
			}
		}
	}

	/**
	 * This method is called from within the constructor to initialize the
	 * form. WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                pageTitle = new javax.swing.JLabel();
                tableHolderCourseTwo = new javax.swing.JScrollPane();
                tableCourseTwo = new javax.swing.JTable();
                chkCompletedOnlyCourseTwo = new javax.swing.JCheckBox();
                chkCompletedOnlyCourseOne = new javax.swing.JCheckBox();
                tableHolderCourseOne = new javax.swing.JScrollPane();
                tableCourseOne = new javax.swing.JTable();
                lblCourseTitleOne = new javax.swing.JLabel();
                lblCourseTitleTwo = new javax.swing.JLabel();
                btnSaveTwo = new javax.swing.JButton();
                btnSaveOne = new javax.swing.JButton();

                pageTitle.setFont(new java.awt.Font("Inter", 1, 24)); // NOI18N
                pageTitle.setText("Enrolled students");

                tableCourseTwo.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {
                                {null, null, null},
                                {null, null, null},
                                {null, null, null},
                                {null, null, null}
                        },
                        new String [] {
                                "Name", "ID", "Grade"
                        }
                ) {
                        boolean[] canEdit = new boolean [] {
                                false, false, true
                        };

                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                                return canEdit [columnIndex];
                        }
                });
                tableCourseTwo.setColumnSelectionAllowed(true);
                tableHolderCourseTwo.setViewportView(tableCourseTwo);
                tableCourseTwo.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

                chkCompletedOnlyCourseTwo.setText("Show completed only");
                chkCompletedOnlyCourseTwo.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                chkCompletedOnlyCourseTwoActionPerformed(evt);
                        }
                });

                chkCompletedOnlyCourseOne.setText("Show completed only");
                chkCompletedOnlyCourseOne.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                chkCompletedOnlyCourseOneActionPerformed(evt);
                        }
                });

                tableCourseOne.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {
                                {null, null, null},
                                {null, null, null},
                                {null, null, null},
                                {null, null, null}
                        },
                        new String [] {
                                "Name", "ID", "Grade"
                        }
                ) {
                        boolean[] canEdit = new boolean [] {
                                false, false, true
                        };

                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                                return canEdit [columnIndex];
                        }
                });
                tableCourseOne.setColumnSelectionAllowed(true);
                tableHolderCourseOne.setViewportView(tableCourseOne);
                tableCourseOne.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

                lblCourseTitleOne.setFont(new java.awt.Font("Inter", 1, 18)); // NOI18N
                lblCourseTitleOne.setText("jLabel1");

                lblCourseTitleTwo.setFont(new java.awt.Font("Inter", 1, 18)); // NOI18N
                lblCourseTitleTwo.setText("jLabel1");

                btnSaveTwo.setText("Save grades");
                btnSaveTwo.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnSaveTwoActionPerformed(evt);
                        }
                });

                btnSaveOne.setText("Save grades");
                btnSaveOne.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnSaveOneActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
                this.setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(pageTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 987, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(27, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(chkCompletedOnlyCourseOne)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(btnSaveOne))
                                        .addComponent(tableHolderCourseOne, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblCourseTitleOne))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblCourseTitleTwo)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addGroup(layout.createSequentialGroup()
                                                        .addComponent(chkCompletedOnlyCourseTwo)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(btnSaveTwo))
                                                .addComponent(tableHolderCourseTwo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(38, 38, 38))
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(pageTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lblCourseTitleOne)
                                        .addComponent(lblCourseTitleTwo))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(chkCompletedOnlyCourseOne)
                                        .addComponent(chkCompletedOnlyCourseTwo)
                                        .addComponent(btnSaveTwo)
                                        .addComponent(btnSaveOne))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(tableHolderCourseOne, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(tableHolderCourseTwo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(40, Short.MAX_VALUE))
                );
        }// </editor-fold>//GEN-END:initComponents

        private void chkCompletedOnlyCourseTwoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkCompletedOnlyCourseTwoActionPerformed
		if (chkCompletedOnlyCourseTwo.isSelected()) {
			this.populateStudents("second", true);
			return;
		}
		this.populateStudents("second", false);
        }//GEN-LAST:event_chkCompletedOnlyCourseTwoActionPerformed

        private void chkCompletedOnlyCourseOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkCompletedOnlyCourseOneActionPerformed

		if (chkCompletedOnlyCourseOne.isSelected()) {
			this.populateStudents("first", true);
			return;
		}
		this.populateStudents("first", false);
        }//GEN-LAST:event_chkCompletedOnlyCourseOneActionPerformed

        private void btnSaveOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveOneActionPerformed
		int R = tableCourseOne.getRowCount();
		int C = tableCourseOne.getColumnCount();

		// NUID header is at index 0
		for (int i = 0; i < R; ++i) {
			for (int j = 0; j < C; ++j) {
				String gradeString = (String) tableCourseOne.getValueAt(i, 2);
				Grade g = null;
				for (var v : Grade.values()) {
					if (v.toString().equals(gradeString)) {
						g = v;
					}
				}

				UniClass uc = this.classesList.get(0).getSerial().equals("first") ? this.classesList.get(0) : this.classesList.get(1);

				Student student = this.workSpace.getStudentDir().getStudentById((String) tableCourseOne.getValueAt(i,1));
				student.getTranscript().updateGrade(student.getTranscript(),uc, g);
//				student.makeSemesterCheck();
			}
		}
		this.populateStudents("first", chkCompletedOnlyCourseOne.isSelected());
		JOptionPane.showMessageDialog(this, "All changes saved!");
        }//GEN-LAST:event_btnSaveOneActionPerformed

        private void btnSaveTwoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveTwoActionPerformed
		int R = tableCourseTwo.getRowCount();
		int C = tableCourseTwo.getColumnCount();

		// NUID header is at index 0
		for (int i = 0; i < R; ++i) {
			for (int j = 0; j < C; ++j) {
				String gradeString = (String) tableCourseTwo.getValueAt(i, 2);
				Grade g = null;
				for (var v : Grade.values()) {
					if (v.toString().equals(gradeString)) {
						g = v;
					}
				}

				UniClass uc = this.classesList.get(0).getSerial().equals("second") ? this.classesList.get(0) : this.classesList.get(1);

				Student student = this.workSpace.getStudentDir().getStudentById((String) tableCourseTwo.getValueAt(i,1));
//				student.getTranscript().getCurrentSemester().getClasses().put(uc,g);
				student.getTranscript().updateGrade(student.getTranscript(),uc, g);
//				student.makeSemesterCheck();
			}
		}
		this.populateStudents("second", chkCompletedOnlyCourseOne.isSelected());
		JOptionPane.showMessageDialog(this, "All changes saved!");
        }//GEN-LAST:event_btnSaveTwoActionPerformed


        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JButton btnSaveOne;
        private javax.swing.JButton btnSaveTwo;
        private javax.swing.JCheckBox chkCompletedOnlyCourseOne;
        private javax.swing.JCheckBox chkCompletedOnlyCourseTwo;
        private javax.swing.JLabel lblCourseTitleOne;
        private javax.swing.JLabel lblCourseTitleTwo;
        private javax.swing.JLabel pageTitle;
        private javax.swing.JTable tableCourseOne;
        private javax.swing.JTable tableCourseTwo;
        private javax.swing.JScrollPane tableHolderCourseOne;
        private javax.swing.JScrollPane tableHolderCourseTwo;
        // End of variables declaration//GEN-END:variables

	private void populateStudents(String serial, boolean completedOnly) {

		DefaultTableModel table = null;
		List<Student> students = null;
		UniClass[] profClasses = new UniClass[2];
		UniClass uc = null;

		if (serial.equalsIgnoreCase("first")) {
			uc = this.classesList.get(0).getSerial().equals("first") ? this.classesList.get(0) : this.classesList.get(1);
			table = (DefaultTableModel) tableCourseOne.getModel();
		} else {
			uc = this.classesList.get(0).getSerial().equals("second") ? this.classesList.get(0) : this.classesList.get(1);
			table = (DefaultTableModel) tableCourseTwo.getModel();
		}

		if (completedOnly) {
			students = this.workSpace.getStudentDir().getStudentsByUniClass(uc, true);
		} else {
			students = this.workSpace.getStudentDir().getStudentsByUniClass(uc);
		}

		int n = table.getRowCount();
		while (n-- > 0) {
			table.removeRow(n);
		}

		for (var a : students) {

			Vector<String> row = new Vector<>();
			row.add(a.getUserProfile().getPerson().getFullName());
			row.add(a.getUuid());
			row.add(a.getTranscript().getAllClasses().get(uc).toString());   // grade

			table.addRow(row);
		}

	}
}
